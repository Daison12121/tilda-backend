// –ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –¢–∏–ª—å–¥–µ
// –í—Å—Ç–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ –±–ª–æ–∫ "HTML-–∫–æ–¥" –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞

(function() {
    'use strict';
    
    // URL –≤–∞—à–µ–≥–æ –±—ç–∫–µ–Ω–¥–∞ –Ω–∞ Railway
    const BACKEND_URL = 'https://your-railway-app.railway.app'; // –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® URL
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è email –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –¢–∏–ª—å–¥–µ
    function getTildaUserEmail() {
        // –°–ø–æ—Å–æ–± 1: –ò–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¢–∏–ª—å–¥—ã
        if (window.tildaForm && window.tildaForm.userEmail) {
            return window.tildaForm.userEmail;
        }
        
        if (window.currentUser && window.currentUser.email) {
            return window.currentUser.email;
        }
        
        // –°–ø–æ—Å–æ–± 2: –ò–∑ localStorage (–≥–¥–µ –¢–∏–ª—å–¥–∞ –º–æ–∂–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        const userEmail = localStorage.getItem('tilda_user_email') || 
                         localStorage.getItem('user_email') ||
                         localStorage.getItem('memberEmail') ||
                         sessionStorage.getItem('tilda_user_email');
        if (userEmail) return userEmail;
        
        // –°–ø–æ—Å–æ–± 3: –ò–∑ cookies
        const cookies = document.cookie.split(';');
        for (let cookie of cookies) {
            const [name, value] = cookie.trim().split('=');
            if (name === 'tilda_user_email' || name === 'user_email' || name === 'memberEmail') {
                return decodeURIComponent(value);
            }
        }
        
        // –°–ø–æ—Å–æ–± 4: –ò–∑ —Å–∫—Ä—ã—Ç—ã—Ö –ø–æ–ª–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–µ—Å–ª–∏ –¢–∏–ª—å–¥–∞ –∏—Ö —Å–æ–∑–¥–∞–µ—Ç)
        const hiddenEmailInput = document.querySelector('input[name="email"][type="hidden"]') ||
                                 document.querySelector('input[name="user_email"][type="hidden"]');
        if (hiddenEmailInput && hiddenEmailInput.value) {
            return hiddenEmailInput.value;
        }
        
        // –°–ø–æ—Å–æ–± 5: –ò–∑ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–µ—Å–ª–∏ email –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≥–¥–µ-—Ç–æ)
        const emailRegex = /[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}/g;
        const pageText = document.body.innerText;
        const emailMatches = pageText.match(emailRegex);
        if (emailMatches && emailMatches.length > 0) {
            // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π email
            return emailMatches[0];
        }
        
        return null;
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–µ—Ä–≤–µ—Ä–∞
    async function fetchUserData(email) {
        try {
            console.log('–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è email:', email);
            
            const response = await fetch(`${BACKEND_URL}/user?email=${encodeURIComponent(email)}`);
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const result = await response.json();
            console.log('–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', result);
            
            return result.data;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            return null;
        }
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    function displayUserData(userData, email) {
        // –ò—â–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
        let container = document.getElementById('user-data-container');
        
        if (!container) {
            container = document.createElement('div');
            container.id = 'user-data-container';
            container.style.cssText = `
                max-width: 600px;
                margin: 20px auto;
                padding: 30px;
                background: white;
                border-radius: 12px;
                box-shadow: 0 4px 20px rgba(0,0,0,0.1);
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            `;
            
            // –í—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –º–µ—Å—Ç–æ
            const targetElement = document.querySelector('.t-container') || 
                                 document.querySelector('.t-section') || 
                                 document.body;
            targetElement.appendChild(container);
        }
        
        if (userData) {
            container.innerHTML = `
                <div style="text-align: center; margin-bottom: 30px;">
                    <h2 style="color: #333; margin-bottom: 10px;">üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</h2>
                    <p style="color: #666;">–í–∞—à–∏ –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</p>
                </div>
                
                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px;">
                    <div style="background: #f8f9fa; padding: 20px; border-radius: 8px; border-left: 4px solid #007bff;">
                        <strong style="color: #495057; display: block; margin-bottom: 5px;">üìß Email</strong>
                        <span style="color: #212529;">${userData.email || email}</span>
                    </div>
                    
                    <div style="background: #f8f9fa; padding: 20px; border-radius: 8px; border-left: 4px solid #28a745;">
                        <strong style="color: #495057; display: block; margin-bottom: 5px;">üë§ –ò–º—è</strong>
                        <span style="color: #212529;">${userData.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</span>
                    </div>
                    
                    <div style="background: #f8f9fa; padding: 20px; border-radius: 8px; border-left: 4px solid #ffc107;">
                        <strong style="color: #495057; display: block; margin-bottom: 5px;">üì± –¢–µ–ª–µ—Ñ–æ–Ω</strong>
                        <span style="color: #212529;">${userData.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}</span>
                    </div>
                    
                    <div style="background: #f8f9fa; padding: 20px; border-radius: 8px; border-left: 4px solid #17a2b8;">
                        <strong style="color: #495057; display: block; margin-bottom: 5px;">üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</strong>
                        <span style="color: #212529;">${userData.created_at ? new Date(userData.created_at).toLocaleDateString('ru-RU') : '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</span>
                    </div>
                </div>
                
                <div style="text-align: center; margin-top: 30px;">
                    <button onclick="window.tildaUserProfile.refresh()" style="
                        background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
                        color: white;
                        border: none;
                        padding: 12px 24px;
                        border-radius: 6px;
                        cursor: pointer;
                        font-size: 14px;
                        font-weight: 500;
                    ">üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ</button>
                </div>
            `;
        } else {
            container.innerHTML = `
                <div style="text-align: center; padding: 40px; color: #dc3545;">
                    <h3 style="margin-bottom: 15px;">‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
                    <p>–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å email: <strong>${email}</strong></p>
                    <p style="margin-top: 15px; font-size: 14px; color: #6c757d;">
                        –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ
                    </p>
                </div>
            `;
        }
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
    function showLoading() {
        let container = document.getElementById('user-data-container');
        
        if (!container) {
            container = document.createElement('div');
            container.id = 'user-data-container';
            container.style.cssText = `
                max-width: 600px;
                margin: 20px auto;
                padding: 30px;
                background: white;
                border-radius: 12px;
                box-shadow: 0 4px 20px rgba(0,0,0,0.1);
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            `;
            
            const targetElement = document.querySelector('.t-container') || 
                                 document.querySelector('.t-section') || 
                                 document.body;
            targetElement.appendChild(container);
        }
        
        container.innerHTML = `
            <div style="text-align: center; padding: 40px;">
                <div style="
                    border: 3px solid #f3f3f3;
                    border-top: 3px solid #007bff;
                    border-radius: 50%;
                    width: 40px;
                    height: 40px;
                    animation: spin 1s linear infinite;
                    margin: 0 auto 20px;
                "></div>
                <h3 style="color: #333; margin-bottom: 10px;">–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è...</h3>
                <p style="color: #666;">–ü–æ–ª—É—á–∞–µ–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ</p>
            </div>
            
            <style>
                @keyframes spin {
                    0% { transform: rotate(0deg); }
                    100% { transform: rotate(360deg); }
                }
            </style>
        `;
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è email
    function showEmailNotFound() {
        let container = document.getElementById('user-data-container');
        
        if (!container) {
            container = document.createElement('div');
            container.id = 'user-data-container';
            container.style.cssText = `
                max-width: 600px;
                margin: 20px auto;
                padding: 30px;
                background: white;
                border-radius: 12px;
                box-shadow: 0 4px 20px rgba(0,0,0,0.1);
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            `;
            
            const targetElement = document.querySelector('.t-container') || 
                                 document.querySelector('.t-section') || 
                                 document.body;
            targetElement.appendChild(container);
        }
        
        container.innerHTML = `
            <div style="text-align: center; padding: 40px; color: #ffc107;">
                <h3 style="margin-bottom: 15px;">‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω</h3>
                <p>–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å email –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.</p>
                <p style="margin-top: 15px; font-size: 14px; color: #6c757d;">
                    –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤–æ—à–ª–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –¢–∏–ª—å–¥—ã
                </p>
                <div style="margin-top: 20px;">
                    <button onclick="window.tildaUserProfile.refresh()" style="
                        background: #ffc107;
                        color: #212529;
                        border: none;
                        padding: 12px 24px;
                        border-radius: 6px;
                        cursor: pointer;
                        font-size: 14px;
                        font-weight: 500;
                    ">üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</button>
                </div>
            </div>
        `;
    }
    
    // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async function loadUserProfile() {
        console.log('–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
        
        showLoading();
        
        // –ü–æ–ª—É—á–∞–µ–º email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const email = getTildaUserEmail();
        console.log('–ù–∞–π–¥–µ–Ω email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', email);
        
        if (!email) {
            console.log('Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω');
            showEmailNotFound();
            return;
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userData = await fetchUserData(email);
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        displayUserData(userData, email);
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π DOM (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –¢–∏–ª—å–¥–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É)
    function observeChanges() {
        const observer = new MutationObserver(function(mutations) {
            let shouldReload = false;
            
            mutations.forEach(function(mutation) {
                if (mutation.type === 'childList' && mutation.target === document.body) {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—á–µ–∑ –ª–∏ –Ω–∞—à –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
                    if (!document.getElementById('user-data-container')) {
                        shouldReload = true;
                    }
                }
            });
            
            if (shouldReload) {
                console.log('–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è DOM, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å...');
                setTimeout(loadUserProfile, 1000);
            }
        });
        
        observer.observe(document.body, {
            childList: true,
            subtree: true
        });
        
        return observer;
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    function init() {
        console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
        setTimeout(loadUserProfile, 500);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ DOM
        observeChanges();
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
        let attempts = 0;
        const maxAttempts = 5;
        const checkInterval = setInterval(function() {
            attempts++;
            
            if (attempts >= maxAttempts) {
                clearInterval(checkInterval);
                return;
            }
            
            // –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ —Å–æ–∑–¥–∞–Ω –∏ email –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
            const email = getTildaUserEmail();
            if (email && !document.getElementById('user-data-container')) {
                console.log(`–ü–æ–ø—ã—Ç–∫–∞ ${attempts}: –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è`);
                loadUserProfile();
            }
            
            if (document.getElementById('user-data-container')) {
                clearInterval(checkInterval);
            }
        }, 2000);
    }
    
    // –ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', init);
    } else {
        init();
    }
    
    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    window.tildaUserProfile = {
        load: loadUserProfile,
        refresh: loadUserProfile,
        getEmail: getTildaUserEmail,
        fetchData: fetchUserData
    };
    
    console.log('–°–∫—Ä–∏–ø—Ç –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:', Object.keys(window.tildaUserProfile));
    
})();