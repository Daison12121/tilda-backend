import express from "express";
import dotenv from "dotenv";
import { createClient } from "@supabase/supabase-js";
import path from "path";
import crypto from "crypto";
import { fileURLToPath } from "url";

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
dotenv.config();

// –ü–æ–ª—É—á–∞–µ–º __dirname –¥–ª—è ES modules
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Express
const app = express();
const PORT = process.env.PORT || 3000;

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase (–∏—Å–ø–æ–ª—å–∑—É–µ–º service_role –∏–∑ .env)
const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);

// –ë–∞–∑–æ–≤—ã–µ –º–∏–¥–¥–ª–≤–∞—Ä—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON –∏ URL-–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.use(express.static(__dirname));

// –†–∞–∑—Ä–µ—à–∞–µ–º CORS –¥–ª—è –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤
app.use((req, res, next) => {
  res.setHeader("Access-Control-Allow-Origin", "*");
  res.setHeader("Access-Control-Allow-Methods", "GET, POST, OPTIONS");
  res.setHeader("Access-Control-Allow-Headers", "Content-Type, Authorization");
  if (req.method === "OPTIONS") return res.sendStatus(200);
  next();
});

// ‚úÖ –≠–ù–î–ü–û–ò–ù–¢: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post("/api/login", async (req, res) => {
  try {
    console.log("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å POST –Ω–∞ /api/login");
    console.log("–î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ (req.body):", req.body);
    
    const { email, password } = req.body;
    
    if (!email) {
      return res.status(400).json({ 
        status: "error", 
        message: "Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏" 
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    const { data: userData, error: userError } = await supabase
      .from("users")
      .select("*")
      .eq("email", email)
      .maybeSingle();
    
    if (userError) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", userError);
      return res.status(500).json({ 
        status: "error", 
        message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" 
      });
    }
    
    if (!userData) {
      return res.status(401).json({ 
        status: "error", 
        message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω" 
      });
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è —Å–µ—Å—Å–∏–∏
    const sessionToken = crypto.randomBytes(32).toString('hex');
    const expiresAt = new Date(Date.now() + 24 * 60 * 60 * 1000); // 24 —á–∞—Å–∞
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ –±–∞–∑–µ (–µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ tokens —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    try {
      await supabase
        .from("tokens")
        .insert({
          token: sessionToken,
          email: email,
          expires_at: expiresAt.toISOString()
        });
    } catch (tokenError) {
      console.log("–¢–∞–±–ª–∏—Ü–∞ tokens –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞");
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç —Å —Ç–æ–∫–µ–Ω–æ–º –∏ URL –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    res.status(200).json({ 
      status: "success", 
      message: "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞",
      token: sessionToken,
      user: userData,
      redirect_url: `/cabinet?token=${sessionToken}`
    });
    
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:", error);
    res.status(500).json({ 
      status: "error", 
      message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" 
    });
  }
});

// ‚úÖ –≠–ù–î–ü–û–ò–ù–¢: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
app.get("/api/user", async (req, res) => {
  try {
    const token = req.query.token;
    if (!token) {
      return res.status(401).json({ error: "Invalid token" });
    }

    const { data: tokenData, error: tokenError } = await supabase
      .from("tokens")
      .select("*")
      .eq("token", token)
      .maybeSingle();

    if (tokenError || !tokenData || new Date(tokenData.expires_at) < new Date()) {
      return res.status(401).json({ error: "Invalid token" });
    }

    const { data: userData, error: userError } = await supabase
      .from("users")
      .select("*")
      .eq("email", tokenData.email)
      .maybeSingle();

    if (userError || !userData) {
      return res.status(404).json({ error: "User not found" });
    }

    res.json({ data: userData });
  } catch (e) {
    res.status(500).json({ error: e.message || "Internal server error" });
  }
});

// ‚úÖ –≠–ù–î–ü–û–ò–ù–¢: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email (–ù–£–ñ–ï–ù –î–õ–Ø –ü–†–û–°–¢–û–ì–û –†–ï–®–ï–ù–ò–Ø)
app.get("/user", async (req, res) => {
  try {
    const email = req.query.email;
    if (!email) return res.status(400).json({ error: "email is required" });

    const { data, error } = await supabase
      .from("users")
      .select("*")
      .eq("email", email)
      .maybeSingle();

    if (error) return res.status(500).json({ error: error.message });
    if (!data) return res.status(404).json({ error: "User not found" });

    res.json({ data });
  } catch (e) {
    res.status(500).json({ error: e.message || "Internal server error" });
  }
});

// ‚úÖ –≠–ù–î–ü–û–ò–ù–¢: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
app.get("/cabinet", (req, res) => {
  res.sendFile(path.join(__dirname, "cabinet.html"));
});

// ‚úÖ –ö–û–†–ù–ï–í–ê–Ø –°–¢–†–ê–ù–ò–¶–ê: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ
app.get("/", (req, res) => {
  res.send(`
    <h1>üöÄ Tilda-Backend Server</h1>
    <p>–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç —É—Å–ø–µ—à–Ω–æ!</p>
    <h2>–î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:</h2>
    <ul>
      <li><strong>GET /health</strong> - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏</li>
      <li><strong>GET /user?email=...</strong> - –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email</li>
      <li><strong>POST /api/login</strong> - Webhook –¥–ª—è –¢–∏–ª—å–¥—ã</li>
      <li><strong>GET /api/user?token=...</strong> - –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ç–æ–∫–µ–Ω—É</li>
      <li><strong>GET /cabinet?token=...</strong> - –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞–±–∏–Ω–µ—Ç–∞</li>
    </ul>
    <p><a href="/health">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–µ—Ä–∞</a></p>
  `);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});
