/**
 * üè† –°–ö–†–ò–ü–¢ –î–õ–Ø –°–¢–†–ê–ù–ò–¶–´ –õ–ò–ß–ù–û–ì–û –ö–ê–ë–ò–ù–ï–¢–ê –í –¢–ò–õ–¨–î–ï
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –≤ –¢–∏–ª—å–¥–µ.
 * –û–Ω –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Ç–æ–∫–µ–Ω –∏–∑ URL –∏–ª–∏ —á–µ—Ä–µ–∑ localStorage.
 * 
 * –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –£–°–¢–ê–ù–û–í–ö–ï:
 * 1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–µ—Å—å —ç—Ç–æ—Ç –∫–æ–¥
 * 2. –í –¢–∏–ª—å–¥–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –¥–æ–±–∞–≤—å—Ç–µ –±–ª–æ–∫ "HTML-–∫–æ–¥"
 * 3. –í—Å—Ç–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ –±–ª–æ–∫
 * 4. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∏ –æ–ø—É–±–ª–∏–∫—É–π—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É
 */

(function() {
    'use strict';
    
    // ‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò
    const CONFIG = {
        // URL –≤–∞—à–µ–≥–æ –±—ç–∫–µ–Ω–¥–∞ –Ω–∞ Railway
        BACKEND_URL: 'https://tilda-backend-production.up.railway.app',
        
        // –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (–≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö)
        TIMEOUT: 10000,
        
        // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –ø–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏
        DEBUG: true,
        
        // –ö–ª—é—á–∏ –¥–ª—è localStorage
        STORAGE_KEYS: {
            USER_DATA: 'tilda_user_data',
            USER_TOKEN: 'tilda_user_token',
            USER_EMAIL: 'tilda_user_email'
        }
    };
    
    // üìù –§–£–ù–ö–¶–ò–Ø –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø
    function log(message, data = null) {
        if (CONFIG.DEBUG) {
            console.log(`[Tilda Cabinet] ${message}`, data || '');
        }
    }
    
    // üîç –ü–û–õ–£–ß–ï–ù–ò–ï –ü–ê–†–ê–ú–ï–¢–†–ê –ò–ó URL
    function getUrlParameter(name) {
        name = name.replace(/[\[]/, '\\[').replace(/[\]]/, '\\]');
        const regex = new RegExp('[\\?&]' + name + '=([^&#]*)');
        const results = regex.exec(location.search);
        return results === null ? '' : decodeURIComponent(results[1].replace(/\+/g, ' '));
    }
    
    // üíæ –°–û–•–†–ê–ù–ï–ù–ò–ï –î–ê–ù–ù–´–• –í LOCALSTORAGE –ò –ö–£–ö–ò
    function saveToStorage(key, data) {
        try {
            localStorage.setItem(key, JSON.stringify(data));
            log(`–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ localStorage: ${key}`);
            
            // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—É–∫–∏ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
            if (typeof data === 'string') {
                setCookie(key, data);
            } else {
                setCookie(key, JSON.stringify(data));
            }
        } catch (error) {
            log(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ localStorage: ${error.message}`);
        }
    }
    
    // üìñ –ü–û–õ–£–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• –ò–ó LOCALSTORAGE
    function getFromStorage(key) {
        try {
            const data = localStorage.getItem(key);
            return data ? JSON.parse(data) : null;
        } catch (error) {
            log(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ localStorage: ${error.message}`);
            return null;
        }
    }
    
    // üç™ –ü–û–õ–£–ß–ï–ù–ò–ï –ó–ù–ê–ß–ï–ù–ò–Ø –ò–ó –ö–£–ö–ò
    function getCookieValue(name) {
        try {
            const value = `; ${document.cookie}`;
            const parts = value.split(`; ${name}=`);
            if (parts.length === 2) {
                return parts.pop().split(';').shift();
            }
        } catch (error) {
            log(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫—É–∫–∏: ${error.message}`);
        }
        return null;
    }
    
    // üç™ –£–°–¢–ê–ù–û–í–ö–ê –ö–£–ö–ò
    function setCookie(name, value, days = 30) {
        try {
            const expires = new Date();
            expires.setTime(expires.getTime() + (days * 24 * 60 * 60 * 1000));
            document.cookie = `${name}=${value};expires=${expires.toUTCString()};path=/`;
            log(`–ö—É–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: ${name}`);
        } catch (error) {
            log(`–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫—É–∫–∏: ${error.message}`);
        }
    }
    
    // üîÑ –ü–û–õ–£–ß–ï–ù–ò–ï –¢–û–ö–ï–ù–ê (–ò–ó URL –ò–õ–ò LOCALSTORAGE)
    function getAuthToken() {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º URL
        const urlToken = getUrlParameter('token');
        if (urlToken) {
            log('–¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω –≤ URL');
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ localStorage –¥–ª—è –±—É–¥—É—â–∏—Ö –ø–æ—Å–µ—â–µ–Ω–∏–π
            saveToStorage(CONFIG.STORAGE_KEYS.USER_TOKEN, urlToken);
            return urlToken;
        }
        
        // –ï—Å–ª–∏ –≤ URL –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º localStorage
        const storageToken = getFromStorage(CONFIG.STORAGE_KEYS.USER_TOKEN);
        if (storageToken) {
            log('–¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω –≤ localStorage');
            return storageToken;
        }
        
        log('–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return null;
    }
    
    // üîç –ü–û–õ–£–ß–ï–ù–ò–ï –ê–ö–¢–£–ê–õ–¨–ù–û–ì–û EMAIL –ò–ó –°–ò–°–¢–ï–ú–´ –¢–ò–õ–¨–î–´
    function getCurrentTildaEmail() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º—É —á–ª–µ–Ω—Å—Ç–≤–∞ –¢–∏–ª—å–¥—ã (—Å–∞–º—ã–π –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫)
        if (window.tildaMembers) {
            log('–ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ tildaMembers:', window.tildaMembers);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (typeof window.tildaMembers.getCurrentUser === 'function') {
                try {
                    const currentUser = window.tildaMembers.getCurrentUser();
                    if (currentUser && currentUser.email) {
                        log(`–ê–∫—Ç—É–∞–ª—å–Ω—ã–π email –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ getCurrentUser: ${currentUser.email}`);
                        return currentUser.email;
                    }
                } catch (error) {
                    log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ getCurrentUser:', error);
                }
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
            const memberSources = [
                window.tildaMembers.currentUser,
                window.tildaMembers.user,
                window.tildaMembers.member
            ];
            
            for (const source of memberSources) {
                if (source && source.email) {
                    log(`–ê–∫—Ç—É–∞–ª—å–Ω—ã–π email –Ω–∞–π–¥–µ–Ω –≤ tildaMembers: ${source.email}`);
                    return source.email;
                }
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        if (window.currentUser && window.currentUser.email) {
            log(`–ê–∫—Ç—É–∞–ª—å–Ω—ã–π email –Ω–∞–π–¥–µ–Ω –≤ currentUser: ${window.currentUser.email}`);
            return window.currentUser.email;
        }
        
        if (window.tildaForm && window.tildaForm.userEmail) {
            log(`–ê–∫—Ç—É–∞–ª—å–Ω—ã–π email –Ω–∞–π–¥–µ–Ω –≤ tildaForm: ${window.tildaForm.userEmail}`);
            return window.tildaForm.userEmail;
        }
        
        return null;
    }
    
    // üìß –ü–û–õ–£–ß–ï–ù–ò–ï EMAIL –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
    function getUserEmail() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –ø–∞—Ä–∞–º–µ—Ç—Ä (–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        const urlEmail = getUrlParameter('email');
        if (urlEmail) {
            log('Email –Ω–∞–π–¥–µ–Ω –≤ URL');
            saveToStorage(CONFIG.STORAGE_KEYS.USER_EMAIL, urlEmail);
            return urlEmail;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π email –∏–∑ —Å–∏—Å—Ç–µ–º—ã –¢–∏–ª—å–¥—ã
        const currentEmail = getCurrentTildaEmail();
        if (currentEmail) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            saveToStorage(CONFIG.STORAGE_KEYS.USER_EMAIL, currentEmail);
            return currentEmail;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–∫–∏ (—Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–º–µ–Ω)
        const cookieNames = ['tilda_user_email', 'userEmail', 'user_email', 'email'];
        for (const cookieName of cookieNames) {
            const cookieEmail = getCookieValue(cookieName);
            if (cookieEmail) {
                log(`Email –Ω–∞–π–¥–µ–Ω –≤ –∫—É–∫–∏ ${cookieName}: ${cookieEmail}`);
                // –î–µ–∫–æ–¥–∏—Ä—É–µ–º URL-–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π email
                const decodedEmail = decodeURIComponent(cookieEmail);
                saveToStorage(CONFIG.STORAGE_KEYS.USER_EMAIL, decodedEmail);
                return decodedEmail;
            }
        }
        
        // –í –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—á–µ—Ä–µ–¥—å –ø—Ä–æ–≤–µ—Ä—è–µ–º localStorage (–º–æ–∂–µ—Ç –±—ã—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–º)
        const storageEmail = getFromStorage(CONFIG.STORAGE_KEYS.USER_EMAIL);
        if (storageEmail) {
            log('Email –Ω–∞–π–¥–µ–Ω –≤ localStorage (–º–æ–∂–µ—Ç –±—ã—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–º)');
            return storageEmail;
        }
        
        log('Email –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return null;
    }
    
    // üåê –ü–û–õ–£–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –° –°–ï–†–í–ï–†–ê
    async function fetchUserData(token = null, email = null) {
        try {
            let url = `${CONFIG.BACKEND_URL}`;
            
            if (token) {
                // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç —Å —Ç–æ–∫–µ–Ω–æ–º
                url += `/api/user?token=${encodeURIComponent(token)}`;
                log('–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–æ–∫–µ–Ω—É');
            } else if (email) {
                // –ï—Å–ª–∏ –µ—Å—Ç—å email, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
                url += `/user?email=${encodeURIComponent(email)}`;
                log('–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ email');
            } else {
                throw new Error('–ù–µ—Ç –Ω–∏ —Ç–æ–∫–µ–Ω–∞, –Ω–∏ email –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞');
            }
            
            log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å:', url);
            
            const response = await fetch(url, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                }
            });
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const result = await response.json();
            log('–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', result);
            
            const userData = result.data || result;
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ localStorage
            saveToStorage(CONFIG.STORAGE_KEYS.USER_DATA, userData);
            if (userData.email) {
                saveToStorage(CONFIG.STORAGE_KEYS.USER_EMAIL, userData.email);
            }
            
            return userData;
            
        } catch (error) {
            log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            throw error;
        }
    }
    
    // üé® –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –î–ê–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ù–ê –°–¢–†–ê–ù–ò–¶–ï
    function displayUserData(userData) {
        // –ò—â–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
        let container = document.getElementById('user-data-container');
        
        if (!container) {
            container = document.createElement('div');
            container.id = 'user-data-container';
            container.style.cssText = `
                max-width: 800px;
                margin: 20px auto;
                padding: 0;
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            `;
            
            // –í—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –º–µ—Å—Ç–æ
            const targetElement = document.querySelector('.t-container') || 
                                 document.querySelector('.t-section') || 
                                 document.querySelector('.t-col') ||
                                 document.body;
            targetElement.appendChild(container);
        }
        
        if (userData) {
            container.innerHTML = `
                <!-- –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ -->
                <div style="
                    background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
                    color: white;
                    padding: 25px;
                    border-radius: 15px;
                    margin-bottom: 25px;
                    text-align: center;
                    box-shadow: 0 8px 25px rgba(79, 172, 254, 0.3);
                ">
                    <h2 style="margin: 0 0 10px 0; font-size: 1.8rem; font-weight: 500;">
                        üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${userData.name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!
                    </h2>
                    <p style="margin: 0; opacity: 0.9; font-size: 1.1rem;">
                        –†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ
                    </p>
                </div>
                
                <!-- –û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ -->
                <div style="
                    background: white;
                    border-radius: 20px;
                    box-shadow: 0 10px 30px rgba(0,0,0,0.1);
                    overflow: hidden;
                    margin-bottom: 25px;
                ">
                    <!-- –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ä—Ç–æ—á–∫–∏ -->
                    <div style="
                        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                        color: white;
                        padding: 25px;
                        text-align: center;
                    ">
                        <h3 style="margin: 0; font-size: 1.5rem; font-weight: 500;">
                            üìã –õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                        </h3>
                    </div>
                    
                    <!-- –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞—Ä—Ç–æ—á–∫–∏ -->
                    <div style="padding: 30px;">
                        <!-- –°–µ—Ç–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ -->
                        <div style="
                            display: grid;
                            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
                            gap: 20px;
                            margin-bottom: 25px;
                        ">
                            <div style="
                                background: #f8f9fa;
                                padding: 20px;
                                border-radius: 12px;
                                border-left: 4px solid #007bff;
                                transition: transform 0.2s ease;
                            " onmouseover="this.style.transform='translateY(-2px)'" onmouseout="this.style.transform='translateY(0)'">
                                <strong style="color: #495057; display: block; margin-bottom: 8px; font-size: 0.9rem; text-transform: uppercase; letter-spacing: 0.5px;">
                                    üìß Email
                                </strong>
                                <span style="color: #212529; font-size: 1.1rem; font-weight: 500;">
                                    ${userData.email || '–ù–µ —É–∫–∞–∑–∞–Ω'}
                                </span>
                            </div>
                            
                            <div style="
                                background: #f8f9fa;
                                padding: 20px;
                                border-radius: 12px;
                                border-left: 4px solid #28a745;
                                transition: transform 0.2s ease;
                            " onmouseover="this.style.transform='translateY(-2px)'" onmouseout="this.style.transform='translateY(0)'">
                                <strong style="color: #495057; display: block; margin-bottom: 8px; font-size: 0.9rem; text-transform: uppercase; letter-spacing: 0.5px;">
                                    üë§ –ò–º—è
                                </strong>
                                <span style="color: #212529; font-size: 1.1rem; font-weight: 500;">
                                    ${userData.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
                                </span>
                            </div>
                            
                            <div style="
                                background: #f8f9fa;
                                padding: 20px;
                                border-radius: 12px;
                                border-left: 4px solid #ffc107;
                                transition: transform 0.2s ease;
                            " onmouseover="this.style.transform='translateY(-2px)'" onmouseout="this.style.transform='translateY(0)'">
                                <strong style="color: #495057; display: block; margin-bottom: 8px; font-size: 0.9rem; text-transform: uppercase; letter-spacing: 0.5px;">
                                    üéØ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                                </strong>
                                <span style="color: #212529; font-family: monospace; font-size: 0.9rem; word-break: break-all;">
                                    ${userData.id || '–ù–µ —É–∫–∞–∑–∞–Ω'}
                                </span>
                            </div>
                            
                            <div style="
                                background: #f8f9fa;
                                padding: 20px;
                                border-radius: 12px;
                                border-left: 4px solid #17a2b8;
                                transition: transform 0.2s ease;
                            " onmouseover="this.style.transform='translateY(-2px)'" onmouseout="this.style.transform='translateY(0)'">
                                <strong style="color: #495057; display: block; margin-bottom: 8px; font-size: 0.9rem; text-transform: uppercase; letter-spacing: 0.5px;">
                                    üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                                </strong>
                                <span style="color: #212529; font-size: 1.1rem; font-weight: 500;">
                                    ${userData.created_at ? new Date(userData.created_at).toLocaleDateString('ru-RU', {
                                        year: 'numeric',
                                        month: 'long',
                                        day: 'numeric'
                                    }) : '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
                                </span>
                            </div>
                        </div>
                        
                        <!-- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ -->
                        <div style="
                            display: grid;
                            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                            gap: 15px;
                            margin-bottom: 25px;
                        ">
                            <div style="
                                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                                color: white;
                                padding: 20px;
                                border-radius: 12px;
                                text-align: center;
                            ">
                                <div style="font-size: 1.8rem; font-weight: bold; margin-bottom: 5px;">
                                    ${userData.created_at ? Math.ceil((new Date() - new Date(userData.created_at)) / (1000 * 60 * 60 * 24)) : 0}
                                </div>
                                <div style="font-size: 0.9rem; opacity: 0.9;">–¥–Ω–µ–π —Å –Ω–∞–º–∏</div>
                            </div>
                            
                            <div style="
                                background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
                                color: white;
                                padding: 20px;
                                border-radius: 12px;
                                text-align: center;
                            ">
                                <div style="font-size: 1.8rem; font-weight: bold; margin-bottom: 5px;">‚úÖ</div>
                                <div style="font-size: 0.9rem; opacity: 0.9;">–ø—Ä–æ—Ñ–∏–ª—å –∞–∫—Ç–∏–≤–µ–Ω</div>
                            </div>
                            
                            <div style="
                                background: linear-gradient(135deg, #dc3545 0%, #e74c3c 100%);
                                color: white;
                                padding: 20px;
                                border-radius: 12px;
                                text-align: center;
                            ">
                                <div style="font-size: 1.8rem; font-weight: bold; margin-bottom: 5px;">üîí</div>
                                <div style="font-size: 0.9rem; opacity: 0.9;">–¥–∞–Ω–Ω—ã–µ –∑–∞—â–∏—â–µ–Ω—ã</div>
                            </div>
                        </div>
                        
                        <!-- –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π -->
                        <div style="text-align: center;">
                            <button onclick="window.tildaCabinet.refresh()" style="
                                background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
                                color: white;
                                border: none;
                                padding: 12px 25px;
                                border-radius: 25px;
                                cursor: pointer;
                                font-size: 14px;
                                font-weight: 500;
                                margin: 0 10px;
                                transition: transform 0.2s ease;
                            " onmouseover="this.style.transform='translateY(-2px)'" onmouseout="this.style.transform='translateY(0)'">
                                üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
                            </button>
                            
                            <button onclick="window.tildaCabinet.logout()" style="
                                background: linear-gradient(135deg, #6c757d 0%, #495057 100%);
                                color: white;
                                border: none;
                                padding: 12px 25px;
                                border-radius: 25px;
                                cursor: pointer;
                                font-size: 14px;
                                font-weight: 500;
                                margin: 0 10px;
                                transition: transform 0.2s ease;
                            " onmouseover="this.style.transform='translateY(-2px)'" onmouseout="this.style.transform='translateY(0)'">
                                üö™ –í—ã–π—Ç–∏
                            </button>
                        </div>
                    </div>
                </div>
            `;
        } else {
            container.innerHTML = `
                <div style="
                    background: white;
                    border-radius: 15px;
                    padding: 40px;
                    text-align: center;
                    color: #dc3545;
                    box-shadow: 0 8px 25px rgba(0,0,0,0.1);
                ">
                    <h3 style="margin-bottom: 15px; font-size: 1.5rem;">‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
                    <p style="margin-bottom: 20px;">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</p>
                    <button onclick="window.tildaCabinet.refresh()" style="
                        background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
                        color: white;
                        border: none;
                        padding: 12px 25px;
                        border-radius: 25px;
                        cursor: pointer;
                        font-size: 14px;
                        font-weight: 500;
                    ">
                        üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                    </button>
                </div>
            `;
        }
    }
    
    // ‚è≥ –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –°–û–°–¢–û–Ø–ù–ò–Ø –ó–ê–ì–†–£–ó–ö–ò
    function showLoading() {
        let container = document.getElementById('user-data-container');
        
        if (!container) {
            container = document.createElement('div');
            container.id = 'user-data-container';
            container.style.cssText = `
                max-width: 800px;
                margin: 20px auto;
                padding: 0;
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            `;
            
            const targetElement = document.querySelector('.t-container') || 
                                 document.querySelector('.t-section') || 
                                 document.querySelector('.t-col') ||
                                 document.body;
            targetElement.appendChild(container);
        }
        
        container.innerHTML = `
            <div style="
                background: white;
                border-radius: 15px;
                padding: 50px;
                text-align: center;
                box-shadow: 0 8px 25px rgba(0,0,0,0.1);
            ">
                <div style="
                    border: 3px solid #f3f3f3;
                    border-top: 3px solid #007bff;
                    border-radius: 50%;
                    width: 50px;
                    height: 50px;
                    animation: spin 1s linear infinite;
                    margin: 0 auto 20px;
                "></div>
                <h3 style="color: #333; margin-bottom: 10px; font-size: 1.5rem;">–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è...</h3>
                <p style="color: #666; margin: 0;">–ü–æ–ª—É—á–∞–µ–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ</p>
            </div>
            
            <style>
                @keyframes spin {
                    0% { transform: rotate(0deg); }
                    100% { transform: rotate(360deg); }
                }
            </style>
        `;
    }
    
    // ‚ùå –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –û–®–ò–ë–ö–ò –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò
    function showAuthError() {
        let container = document.getElementById('user-data-container');
        
        if (!container) {
            container = document.createElement('div');
            container.id = 'user-data-container';
            container.style.cssText = `
                max-width: 800px;
                margin: 20px auto;
                padding: 0;
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            `;
            
            const targetElement = document.querySelector('.t-container') || 
                                 document.querySelector('.t-section') || 
                                 document.querySelector('.t-col') ||
                                 document.body;
            targetElement.appendChild(container);
        }
        
        container.innerHTML = `
            <div style="
                background: white;
                border-radius: 15px;
                padding: 40px;
                text-align: center;
                color: #ffc107;
                box-shadow: 0 8px 25px rgba(0,0,0,0.1);
            ">
                <h3 style="margin-bottom: 15px; font-size: 1.5rem;">‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</h3>
                <p style="margin-bottom: 20px;">–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ª–∏—á–Ω–æ–º—É –∫–∞–±–∏–Ω–µ—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É</p>
                <p style="margin-bottom: 20px; font-size: 14px; color: #666;">
                    ${window.location.pathname === '/cabinet' ? '–ß–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –≤—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...' : ''}
                </p>
                <div style="margin-bottom: 20px;">
                    <button onclick="window.tildaCabinet.forceRefresh()" style="
                        background: linear-gradient(135deg, #ffc107 0%, #e0a800 100%);
                        color: #212529;
                        border: none;
                        padding: 12px 25px;
                        border-radius: 25px;
                        cursor: pointer;
                        font-size: 14px;
                        font-weight: 500;
                        margin: 0 5px;
                    ">
                        üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
                    </button>
                    <button onclick="window.location.href='/members/login'" style="
                        background: linear-gradient(135deg, #28a745 0%, #1e7e34 100%);
                        color: white;
                        border: none;
                        padding: 12px 25px;
                        border-radius: 25px;
                        cursor: pointer;
                        font-size: 14px;
                        font-weight: 500;
                        margin: 0 5px;
                    ">
                        üîë –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É
                    </button>
                    <button onclick="window.tildaCabinet.testLogin()" style="
                        background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
                        color: white;
                        border: none;
                        padding: 12px 25px;
                        border-radius: 25px;
                        cursor: pointer;
                        font-size: 14px;
                        font-weight: 500;
                        margin: 0 5px;
                    ">
                        üß™ –¢–µ—Å—Ç —Å –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–º–∏
                    </button>
                </div>
                <details style="text-align: left; margin-top: 20px; font-size: 12px; color: #666;">
                    <summary style="cursor: pointer; margin-bottom: 10px;">üîç –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</summary>
                    <div id="debug-auth-info">
                        <div><strong>URL:</strong> ${window.location.href}</div>
                        <div><strong>localStorage —Ç–æ–∫–µ–Ω:</strong> ${localStorage.getItem('tilda_user_token') || '–ù–µ—Ç'}</div>
                        <div><strong>localStorage email:</strong> ${localStorage.getItem('tilda_user_email') || '–ù–µ—Ç'}</div>
                        <div><strong>–ö—É–∫–∏:</strong> ${document.cookie || '–ù–µ—Ç'}</div>
                        <div><strong>URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</strong> ${window.location.search || '–ù–µ—Ç'}</div>
                    </div>
                </details>
            </div>
        `;
    }
    
    // üîÑ –û–ë–ù–û–í–õ–ï–ù–ò–ï –î–ê–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
    async function refreshUserData() {
        log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
        showLoading();
        
        try {
            const token = getAuthToken();
            const email = getUserEmail();
            
            if (!token && !email) {
                log('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                const urlParams = new URLSearchParams(window.location.search);
                const autoRedirect = urlParams.get('redirect') !== 'false';
                
                if (autoRedirect && window.location.pathname === '/cabinet') {
                    log('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞...');
                    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                    setTimeout(() => {
                        window.location.href = '/members/login?redirect=' + encodeURIComponent(window.location.href);
                    }, 2000);
                }
                
                showAuthError();
                return;
            }
            
            let userData = null;
            
            // –ü—Ä–æ–±—É–µ–º —Å —Ç–æ–∫–µ–Ω–æ–º, –ø–æ—Ç–æ–º —Å email
            if (token) {
                try {
                    log('–ü—Ä–æ–±—É–µ–º –∑–∞–ø—Ä–æ—Å —Å —Ç–æ–∫–µ–Ω–æ–º...');
                    userData = await fetchUserData(token, null);
                    log('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –ø–æ —Ç–æ–∫–µ–Ω—É');
                } catch (error) {
                    log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å —Ç–æ–∫–µ–Ω–æ–º:', error.message);
                    
                    if (email) {
                        log('–ü—Ä–æ–±—É–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ email...');
                        userData = await fetchUserData(null, email);
                        log('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –ø–æ email');
                    } else {
                        throw error;
                    }
                }
            } else if (email) {
                log('–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –ø–æ email...');
                userData = await fetchUserData(null, email);
            }
            
            displayUserData(userData);
            
        } catch (error) {
            log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
            displayUserData(null);
        }
    }
    
    // üö™ –í–´–•–û–î –ò–ó –°–ò–°–¢–ï–ú–´
    function logout() {
        log('–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
        
        // –û—á–∏—â–∞–µ–º localStorage
        Object.values(CONFIG.STORAGE_KEYS).forEach(key => {
            localStorage.removeItem(key);
        });
        
        // –û—á–∏—â–∞–µ–º –∫—É–∫–∏
        const cookieNames = ['tilda_user_email', 'tilda_user_token', 'tilda_user_data'];
        cookieNames.forEach(name => {
            document.cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;`;
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        showAuthError();
        
        // –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
        // window.location.href = '/login';
    }
    
    // üîÑ –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• –¢–ï–ö–£–©–ï–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
    async function loadCurrentUserData(token, email) {
        let userData = null;
        
        // –ü—Ä–æ–±—É–µ–º —Å —Ç–æ–∫–µ–Ω–æ–º, –ø–æ—Ç–æ–º —Å email
        if (token) {
            try {
                log('–ü—Ä–æ–±—É–µ–º –∑–∞–ø—Ä–æ—Å —Å —Ç–æ–∫–µ–Ω–æ–º...');
                userData = await fetchUserData(token, null);
                log('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –ø–æ —Ç–æ–∫–µ–Ω—É');
            } catch (error) {
                log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å —Ç–æ–∫–µ–Ω–æ–º:', error.message);
                
                if (email) {
                    log('–ü—Ä–æ–±—É–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ email...');
                    userData = await fetchUserData(null, email);
                    log('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –ø–æ email');
                } else {
                    throw error;
                }
            }
        } else if (email) {
            log('–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –ø–æ email...');
            userData = await fetchUserData(null, email);
        }
        
        return userData;
    }
    
    // üîÑ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –î–ê–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
    function forceRefreshUserData() {
        log('–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
        
        // –û—á–∏—â–∞–µ–º –∫—ç—à
        localStorage.removeItem(CONFIG.STORAGE_KEYS.USER_DATA);
        localStorage.removeItem(CONFIG.STORAGE_KEYS.USER_EMAIL);
        localStorage.removeItem(CONFIG.STORAGE_KEYS.USER_TOKEN);
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        loadUserProfile();
    }
    
    // üéØ –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ó–ê–ì–†–£–ó–ö–ò –ü–†–û–§–ò–õ–Ø
    async function loadUserProfile() {
        log('–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
        
        // –ü–æ–¥—Ä–æ–±–Ω–∞—è –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        log('=== –û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø ===');
        log('URL:', window.location.href);
        log('URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:', window.location.search);
        log('localStorage —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ:', {
            token: localStorage.getItem(CONFIG.STORAGE_KEYS.USER_TOKEN),
            email: localStorage.getItem(CONFIG.STORAGE_KEYS.USER_EMAIL),
            userData: localStorage.getItem(CONFIG.STORAGE_KEYS.USER_DATA)
        });
        log('–ö—É–∫–∏:', document.cookie);
        log('–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¢–∏–ª—å–¥—ã:', {
            tildaForm: !!window.tildaForm,
            currentUser: !!window.currentUser,
            tildaMembers: !!window.tildaMembers
        });
        log('==============================');
        
        showLoading();
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏ email
            const token = getAuthToken();
            const email = getUserEmail();
            
            log('–ù–∞–π–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', { 
                hasToken: !!token, 
                hasEmail: !!email,
                token: token ? token.substring(0, 20) + '...' : null,
                email: email
            });
            
            if (!token && !email) {
                log('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                const urlParams = new URLSearchParams(window.location.search);
                const autoRedirect = urlParams.get('redirect') !== 'false';
                
                if (autoRedirect && window.location.pathname === '/cabinet') {
                    log('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞...');
                    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                    setTimeout(() => {
                        window.location.href = '/members/login?redirect=' + encodeURIComponent(window.location.href);
                    }, 2000);
                }
                
                showAuthError();
                return;
            }
            
            // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage
            const cachedData = getFromStorage(CONFIG.STORAGE_KEYS.USER_DATA);
            if (cachedData && cachedData.email) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –ª–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                const currentEmail = email || getUserEmail();
                if (currentEmail && cachedData.email === currentEmail) {
                    log('–ù–∞–π–¥–µ–Ω—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
                    displayUserData(cachedData);
                } else {
                    log(`–ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (${cachedData.email} != ${currentEmail}), –æ—á–∏—â–∞–µ–º –∫—ç—à`);
                    // –û—á–∏—â–∞–µ–º –∫—ç—à –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    localStorage.removeItem(CONFIG.STORAGE_KEYS.USER_DATA);
                    localStorage.removeItem(CONFIG.STORAGE_KEYS.USER_TOKEN);
                    
                    // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Ö
                    if (currentEmail || token) {
                        const userData = await loadCurrentUserData(token, currentEmail);
                        displayUserData(userData);
                    } else {
                        showAuthError();
                    }
                    return;
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ–Ω–µ
                setTimeout(async () => {
                    try {
                        let userData = null;
                        
                        // –ü—Ä–æ–±—É–µ–º —Å —Ç–æ–∫–µ–Ω–æ–º, –ø–æ—Ç–æ–º —Å email
                        if (token) {
                            try {
                                userData = await fetchUserData(token, null);
                            } catch (error) {
                                if (email) {
                                    userData = await fetchUserData(null, email);
                                }
                            }
                        } else if (email) {
                            userData = await fetchUserData(null, email);
                        }
                        
                        if (userData && JSON.stringify(userData) !== JSON.stringify(cachedData)) {
                            log('–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å, –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º');
                            displayUserData(userData);
                        }
                    } catch (error) {
                        log('–û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
                    }
                }, 1000);
                
                return;
            }
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
            let userData = null;
            
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∑–∞–ø—Ä–æ—Å —Å —Ç–æ–∫–µ–Ω–æ–º (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if (token) {
                try {
                    log('–ü—Ä–æ–±—É–µ–º –∑–∞–ø—Ä–æ—Å —Å —Ç–æ–∫–µ–Ω–æ–º...');
                    userData = await fetchUserData(token, null);
                    log('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –ø–æ —Ç–æ–∫–µ–Ω—É');
                } catch (error) {
                    log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å —Ç–æ–∫–µ–Ω–æ–º:', error.message);
                    
                    // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º –ø–æ email
                    if (email) {
                        log('–ü—Ä–æ–±—É–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ email...');
                        try {
                            userData = await fetchUserData(null, email);
                            log('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –ø–æ email');
                        } catch (emailError) {
                            log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ email:', emailError.message);
                            throw emailError;
                        }
                    } else {
                        throw error;
                    }
                }
            } else if (email) {
                // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç, –Ω–æ –µ—Å—Ç—å email
                log('–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –ø–æ email...');
                userData = await fetchUserData(null, email);
            }
            
            displayUserData(userData);
            
        } catch (error) {
            log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è:', error);
            displayUserData(null);
        }
    }
    
    // üöÄ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ö–†–ò–ü–¢–ê
    function initializeCabinet() {
        log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞');
        
        // üß™ –¢–ï–°–¢–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò
        function testLogin() {
            log('–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤—Ö–æ–¥–∞ —Å –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–º–∏');
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            const testEmail = 'barbarosgroup2024@gmail.com';
            const testToken = 'cd0a2d8fc0cac7e5baf197eac40fff1b7417dcc7fd8bc92a559de709f20991fa';
            
            saveToStorage(CONFIG.STORAGE_KEYS.USER_EMAIL, testEmail);
            saveToStorage(CONFIG.STORAGE_KEYS.USER_TOKEN, testToken);
            
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
            refreshUserData();
        }
        
        // –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–±–∏–Ω–µ—Ç–æ–º
        window.tildaCabinet = {
            load: loadUserProfile,
            refresh: refreshUserData,
            forceRefresh: forceRefreshUserData,
            logout: logout,
            getToken: getAuthToken,
            getEmail: getUserEmail,
            fetchData: fetchUserData,
            testLogin: testLogin
        };
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
        setTimeout(loadUserProfile, 500);
        
        log('–°–∫—Ä–∏–ø—Ç –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        log('–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:', Object.keys(window.tildaCabinet));
    }
    
    // üé¨ –ó–ê–ü–£–°–ö –°–ö–†–ò–ü–¢–ê
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initializeCabinet);
    } else {
        initializeCabinet();
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É (–Ω–∞ —Å–ª—É—á–∞–π –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏)
    setTimeout(initializeCabinet, 1000);
    
    log('–°–∫—Ä–∏–ø—Ç –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –¥–ª—è –¢–∏–ª—å–¥—ã –∑–∞–≥—Ä—É–∂–µ–Ω');
    
})();