/**
 * üè† –£–ü–†–û–©–ï–ù–ù–´–ô –°–ö–†–ò–ü–¢ –î–õ–Ø –°–¢–†–ê–ù–ò–¶–´ –õ–ò–ß–ù–û–ì–û –ö–ê–ë–ò–ù–ï–¢–ê –í –¢–ò–õ–¨–î–ï
 * 
 * –ü—Ä–æ—Å—Ç–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: –ø–æ–ª—É—á–∞–µ–º email –∏–∑ –¢–∏–ª—å–¥—ã ‚Üí –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API
 */

(function() {
    'use strict';
    
    // ‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò
    const CONFIG = {
        BACKEND_URL: 'https://tilda-backend-production.up.railway.app',
        DEBUG: true
    };
    
    // üìù –§–£–ù–ö–¶–ò–Ø –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø
    function log(message, data = null) {
        if (CONFIG.DEBUG) {
            console.log(`[Tilda Cabinet] ${message}`, data || '');
        }
    }
    
    // üîç –ü–û–ò–°–ö COLLABZA SDK –ò –¢–û–ö–ï–ù–û–í
    function getTildaUserEmail() {
        log('=== –ü–û–ò–°–ö COLLABZA SDK –ò –°–ò–°–¢–ï–ú–´ –°–ï–°–°–ò–ô ===');
        
        // 1. –ü–û–ò–°–ö COLLABZA SDK –í –ì–õ–û–ë–ê–õ–¨–ù–´–• –ü–ï–†–ï–ú–ï–ù–ù–´–•
        log('=== –ü–û–ò–°–ö COLLABZA/–í–ù–ï–®–ù–ò–• SDK ===');
        const possibleSDKs = [
            'Collabza', 'collabza', 'COLLABZA',
            'CollabzaSDK', 'collabzaSDK', 'collabza_sdk',
            'CZ', 'cz', 'czSDK',
            'UserSDK', 'userSDK', 'user_sdk',
            'AuthSDK', 'authSDK', 'auth_sdk',
            'SessionSDK', 'sessionSDK', 'session_sdk'
        ];
        
        possibleSDKs.forEach(sdkName => {
            if (window[sdkName]) {
                log(`–ù–ê–ô–î–ï–ù SDK: window.${sdkName}`, window[sdkName]);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã SDK
                if (typeof window[sdkName] === 'object') {
                    const methods = Object.keys(window[sdkName]);
                    log(`–ú–µ—Ç–æ–¥—ã ${sdkName}:`, methods);
                    
                    // –ò—â–µ–º –º–µ—Ç–æ–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    const userMethods = methods.filter(method => 
                        method.toLowerCase().includes('user') || 
                        method.toLowerCase().includes('email') ||
                        method.toLowerCase().includes('current') ||
                        method.toLowerCase().includes('session') ||
                        method.toLowerCase().includes('auth')
                    );
                    
                    if (userMethods.length > 0) {
                        log(`–ù–∞–π–¥–µ–Ω—ã –º–µ—Ç–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ ${sdkName}:`, userMethods);
                        
                        userMethods.forEach(method => {
                            try {
                                if (typeof window[sdkName][method] === 'function') {
                                    const result = window[sdkName][method]();
                                    log(`${sdkName}.${method}():`, result);
                                    if (result && result.email) {
                                        log(`–ù–ê–ô–î–ï–ù EMAIL —á–µ—Ä–µ–∑ ${sdkName}.${method}(): ${result.email}`);
                                    }
                                } else {
                                    log(`${sdkName}.${method}:`, window[sdkName][method]);
                                    if (window[sdkName][method] && window[sdkName][method].email) {
                                        log(`–ù–ê–ô–î–ï–ù EMAIL –≤ ${sdkName}.${method}: ${window[sdkName][method].email}`);
                                    }
                                }
                            } catch (error) {
                                log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ ${sdkName}.${method}:`, error);
                            }
                        });
                    }
                }
            }
        });
        
        // 2. –ü–û–ò–°–ö –í–°–ï–• –ì–õ–û–ë–ê–õ–¨–ù–´–• –ü–ï–†–ï–ú–ï–ù–ù–´–• –° –î–ê–ù–ù–´–ú–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
        log('=== –ü–û–ò–°–ö –í–°–ï–• –ì–õ–û–ë–ê–õ–¨–ù–´–• –ü–ï–†–ï–ú–ï–ù–ù–´–• ===');
        const allWindowKeys = Object.keys(window);
        const userRelatedKeys = allWindowKeys.filter(key => 
            key.toLowerCase().includes('user') ||
            key.toLowerCase().includes('auth') ||
            key.toLowerCase().includes('session') ||
            key.toLowerCase().includes('token') ||
            key.toLowerCase().includes('email') ||
            key.toLowerCase().includes('current') ||
            key.toLowerCase().includes('member') ||
            key.toLowerCase().includes('profile') ||
            key.toLowerCase().includes('account')
        );
        
        log('–ù–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:', userRelatedKeys);
        
        userRelatedKeys.forEach(key => {
            try {
                const value = window[key];
                log(`window.${key}:`, value);
                
                if (value && typeof value === 'object') {
                    if (value.email) {
                        log(`–ù–ê–ô–î–ï–ù EMAIL –≤ window.${key}: ${value.email}`);
                    }
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
                    Object.keys(value).forEach(subKey => {
                        if (subKey.toLowerCase().includes('email') || 
                            subKey.toLowerCase().includes('user') ||
                            subKey.toLowerCase().includes('current')) {
                            log(`  ${key}.${subKey}:`, value[subKey]);
                            if (value[subKey] && value[subKey].email) {
                                log(`–ù–ê–ô–î–ï–ù EMAIL –≤ window.${key}.${subKey}: ${value[subKey].email}`);
                            }
                        }
                    });
                }
            } catch (error) {
                log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ window.${key}:`, error);
            }
        });
        
        // 3. –ü–û–ò–°–ö –¢–û–ö–ï–ù–û–í –ò –°–ï–°–°–ò–ô –í STORAGE
        log('=== –ü–û–ò–°–ö –¢–û–ö–ï–ù–û–í COLLABZA –í STORAGE ===');
        
        // localStorage
        for (let i = 0; i < localStorage.length; i++) {
            const key = localStorage.key(i);
            if (key.toLowerCase().includes('collabza') ||
                key.toLowerCase().includes('token') ||
                key.toLowerCase().includes('session') ||
                key.toLowerCase().includes('auth') ||
                key.toLowerCase().includes('jwt') ||
                key.toLowerCase().includes('access') ||
                key.toLowerCase().includes('bearer')) {
                
                const value = localStorage.getItem(key);
                log(`localStorage ${key}:`, value);
                
                try {
                    const parsed = JSON.parse(value);
                    log(`–ü–∞—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ${key}:`, parsed);
                    if (parsed.email) {
                        log(`–ù–ê–ô–î–ï–ù EMAIL –≤ localStorage ${key}: ${parsed.email}`);
                    }
                } catch (e) {
                    // –ù–µ JSON
                }
            }
        }
        
        // sessionStorage
        for (let i = 0; i < sessionStorage.length; i++) {
            const key = sessionStorage.key(i);
            if (key.toLowerCase().includes('collabza') ||
                key.toLowerCase().includes('token') ||
                key.toLowerCase().includes('session') ||
                key.toLowerCase().includes('auth') ||
                key.toLowerCase().includes('jwt') ||
                key.toLowerCase().includes('access') ||
                key.toLowerCase().includes('bearer')) {
                
                const value = sessionStorage.getItem(key);
                log(`sessionStorage ${key}:`, value);
                
                try {
                    const parsed = JSON.parse(value);
                    log(`–ü–∞—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ${key}:`, parsed);
                    if (parsed.email) {
                        log(`–ù–ê–ô–î–ï–ù EMAIL –≤ sessionStorage ${key}: ${parsed.email}`);
                    }
                } catch (e) {
                    // –ù–µ JSON
                }
            }
        }
        
        // 4. –ü–û–ò–°–ö –¢–û–ö–ï–ù–û–í –í –ö–£–ö–ê–•
        log('=== –ü–û–ò–°–ö –¢–û–ö–ï–ù–û–í COLLABZA –í –ö–£–ö–ê–• ===');
        const cookies = document.cookie.split(';');
        cookies.forEach(cookie => {
            const [name, value] = cookie.trim().split('=');
            if (name.toLowerCase().includes('collabza') ||
                name.toLowerCase().includes('token') ||
                name.toLowerCase().includes('session') ||
                name.toLowerCase().includes('auth') ||
                name.toLowerCase().includes('jwt') ||
                name.toLowerCase().includes('access') ||
                name.toLowerCase().includes('bearer')) {
                
                try {
                    const decoded = decodeURIComponent(value || '');
                    log(`–ö—É–∫–∞ ${name}:`, decoded);
                    
                    try {
                        const parsed = JSON.parse(decoded);
                        log(`–ü–∞—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫—É–∫–∞ ${name}:`, parsed);
                        if (parsed.email) {
                            log(`–ù–ê–ô–î–ï–ù EMAIL –≤ –∫—É–∫–µ ${name}: ${parsed.email}`);
                        }
                    } catch (e) {
                        // –ù–µ JSON
                    }
                } catch (e) {
                    log(`–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∫—É–∫–∏ ${name}:`, e);
                }
            }
        });
        
        // 5. –ü–û–ò–°–ö –°–ö–†–ò–ü–¢–û–í COLLABZA –ù–ê –°–¢–†–ê–ù–ò–¶–ï
        log('=== –ü–û–ò–°–ö –°–ö–†–ò–ü–¢–û–í COLLABZA –ù–ê –°–¢–†–ê–ù–ò–¶–ï ===');
        const scripts = document.querySelectorAll('script[src]');
        scripts.forEach((script, index) => {
            const src = script.src;
            if (src.toLowerCase().includes('collabza') ||
                src.toLowerCase().includes('auth') ||
                src.toLowerCase().includes('user') ||
                src.toLowerCase().includes('session') ||
                src.toLowerCase().includes('sdk')) {
                log(`–ù–∞–π–¥–µ–Ω —Å–∫—Ä–∏–ø—Ç ${index}: ${src}`);
            }
        });
        
        log('=== –ö–û–ù–ï–¶ –ü–û–ò–°–ö–ê COLLABZA SDK ===');
        log('–í–ù–ò–ú–ê–ù–ò–ï: –ò—â–∏—Ç–µ —Å—Ç—Ä–æ–∫–∏ —Å "–ù–ê–ô–î–ï–ù EMAIL" –∏–ª–∏ "–ù–ê–ô–î–ï–ù SDK"');
        
        return null; // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    }
    
    // üåê –ü–û–õ–£–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –° –°–ï–†–í–ï–†–ê
    async function fetchUserData(email) {
        try {
            const url = `${CONFIG.BACKEND_URL}/user?email=${encodeURIComponent(email)}`;
            log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å:', url);
            
            const response = await fetch(url, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                }
            });
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const result = await response.json();
            log('–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', result);
            
            return result.data || result;
            
        } catch (error) {
            log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            throw error;
        }
    }
    
    // üé® –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –î–ê–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ù–ê –°–¢–†–ê–ù–ò–¶–ï
    function displayUserData(userData) {
        // –ò—â–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
        let container = document.getElementById('user-data-container');
        
        if (!container) {
            container = document.createElement('div');
            container.id = 'user-data-container';
            container.style.cssText = `
                max-width: 800px;
                margin: 20px auto;
                padding: 0;
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            `;
            
            // –í—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –º–µ—Å—Ç–æ
            const targetElement = document.querySelector('.t-container') || 
                                 document.querySelector('.t-section') || 
                                 document.querySelector('.t-col') ||
                                 document.body;
            targetElement.appendChild(container);
        }
        
        if (userData) {
            container.innerHTML = `
                <!-- –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ -->
                <div style="
                    background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
                    color: white;
                    padding: 25px;
                    border-radius: 15px;
                    margin-bottom: 25px;
                    text-align: center;
                    box-shadow: 0 8px 25px rgba(79, 172, 254, 0.3);
                ">
                    <h2 style="margin: 0 0 10px 0; font-size: 1.8rem; font-weight: 500;">
                        üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${userData.name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!
                    </h2>
                    <p style="margin: 0; opacity: 0.9; font-size: 1.1rem;">
                        –†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ
                    </p>
                </div>
                
                <!-- –û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ -->
                <div style="
                    background: white;
                    border-radius: 20px;
                    box-shadow: 0 10px 30px rgba(0,0,0,0.1);
                    overflow: hidden;
                    margin-bottom: 25px;
                ">
                    <!-- –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ä—Ç–æ—á–∫–∏ -->
                    <div style="
                        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                        color: white;
                        padding: 25px;
                        text-align: center;
                    ">
                        <h3 style="margin: 0; font-size: 1.5rem; font-weight: 500;">
                            üìã –õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                        </h3>
                    </div>
                    
                    <!-- –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞—Ä—Ç–æ—á–∫–∏ -->
                    <div style="padding: 30px;">
                        <!-- –°–µ—Ç–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ -->
                        <div style="
                            display: grid;
                            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
                            gap: 20px;
                            margin-bottom: 25px;
                        ">
                            <div style="
                                background: #f8f9fa;
                                padding: 20px;
                                border-radius: 12px;
                                border-left: 4px solid #007bff;
                                transition: transform 0.2s ease;
                            " onmouseover="this.style.transform='translateY(-2px)'" onmouseout="this.style.transform='translateY(0)'">
                                <strong style="color: #495057; display: block; margin-bottom: 8px; font-size: 0.9rem; text-transform: uppercase; letter-spacing: 0.5px;">
                                    üìß Email
                                </strong>
                                <span style="color: #212529; font-size: 1.1rem; font-weight: 500;">
                                    ${userData.email || '–ù–µ —É–∫–∞–∑–∞–Ω'}
                                </span>
                            </div>
                            
                            <div style="
                                background: #f8f9fa;
                                padding: 20px;
                                border-radius: 12px;
                                border-left: 4px solid #28a745;
                                transition: transform 0.2s ease;
                            " onmouseover="this.style.transform='translateY(-2px)'" onmouseout="this.style.transform='translateY(0)'">
                                <strong style="color: #495057; display: block; margin-bottom: 8px; font-size: 0.9rem; text-transform: uppercase; letter-spacing: 0.5px;">
                                    üë§ –ò–º—è
                                </strong>
                                <span style="color: #212529; font-size: 1.1rem; font-weight: 500;">
                                    ${userData.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
                                </span>
                            </div>
                            
                            <div style="
                                background: #f8f9fa;
                                padding: 20px;
                                border-radius: 12px;
                                border-left: 4px solid #ffc107;
                                transition: transform 0.2s ease;
                            " onmouseover="this.style.transform='translateY(-2px)'" onmouseout="this.style.transform='translateY(0)'">
                                <strong style="color: #495057; display: block; margin-bottom: 8px; font-size: 0.9rem; text-transform: uppercase; letter-spacing: 0.5px;">
                                    üÜî ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                                </strong>
                                <span style="color: #212529; font-size: 1.1rem; font-weight: 500; font-family: monospace;">
                                    ${userData.id || '–ù–µ —É–∫–∞–∑–∞–Ω'}
                                </span>
                            </div>
                            
                            <div style="
                                background: #f8f9fa;
                                padding: 20px;
                                border-radius: 12px;
                                border-left: 4px solid #17a2b8;
                                transition: transform 0.2s ease;
                            " onmouseover="this.style.transform='translateY(-2px)'" onmouseout="this.style.transform='translateY(0)'">
                                <strong style="color: #495057; display: block; margin-bottom: 8px; font-size: 0.9rem; text-transform: uppercase; letter-spacing: 0.5px;">
                                    üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                                </strong>
                                <span style="color: #212529; font-size: 1.1rem; font-weight: 500;">
                                    ${userData.created_at ? new Date(userData.created_at).toLocaleDateString('ru-RU', {
                                        year: 'numeric',
                                        month: 'long',
                                        day: 'numeric'
                                    }) : '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
                                </span>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ -->
                <div style="
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                    gap: 20px;
                    margin-bottom: 25px;
                ">
                    <div style="
                        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                        color: white;
                        padding: 25px;
                        border-radius: 15px;
                        text-align: center;
                        box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
                    ">
                        <div style="font-size: 2.5rem; font-weight: bold; margin-bottom: 10px;">
                            ${Math.floor((Date.now() - new Date(userData.created_at || Date.now())) / (1000 * 60 * 60 * 24)) || '?'}
                        </div>
                        <div style="opacity: 0.9;">–¥–Ω–µ–π —Å –Ω–∞–º–∏</div>
                    </div>
                    
                    <div style="
                        background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
                        color: white;
                        padding: 25px;
                        border-radius: 15px;
                        text-align: center;
                        box-shadow: 0 8px 25px rgba(79, 172, 254, 0.3);
                    ">
                        <div style="font-size: 2.5rem; font-weight: bold; margin-bottom: 10px;">
                            ‚úÖ
                        </div>
                        <div style="opacity: 0.9;">–ø—Ä–æ—Ñ–∏–ª—å –∞–∫—Ç–∏–≤–µ–Ω</div>
                    </div>
                    
                    <div style="
                        background: linear-gradient(135deg, #fa709a 0%, #fee140 100%);
                        color: white;
                        padding: 25px;
                        border-radius: 15px;
                        text-align: center;
                        box-shadow: 0 8px 25px rgba(250, 112, 154, 0.3);
                    ">
                        <div style="font-size: 2.5rem; font-weight: bold; margin-bottom: 10px;">
                            üîí
                        </div>
                        <div style="opacity: 0.9;">–¥–∞–Ω–Ω—ã–µ –∑–∞—â–∏—â–µ–Ω—ã</div>
                    </div>
                </div>
                
                <!-- –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è -->
                <div style="text-align: center; margin-top: 30px;">
                    <button onclick="window.tildaCabinet.refresh()" style="
                        background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
                        color: white;
                        border: none;
                        padding: 15px 30px;
                        border-radius: 25px;
                        cursor: pointer;
                        font-size: 16px;
                        font-weight: 500;
                        box-shadow: 0 4px 15px rgba(79, 172, 254, 0.3);
                        transition: transform 0.2s ease;
                    " onmouseover="this.style.transform='translateY(-2px)'" onmouseout="this.style.transform='translateY(0)'">
                        üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
                    </button>
                </div>
            `;
        } else {
            container.innerHTML = `
                <div style="
                    background: white;
                    border-radius: 15px;
                    padding: 40px;
                    text-align: center;
                    color: #ffc107;
                    box-shadow: 0 8px 25px rgba(0,0,0,0.1);
                ">
                    <h3 style="margin-bottom: 15px; font-size: 1.5rem;">‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</h3>
                    <p style="margin-bottom: 20px;">–°–∫—Ä–∏–ø—Ç –Ω–µ –º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ email –≤ —Å–∏—Å—Ç–µ–º–µ –¢–∏–ª—å–¥—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.</p>
                    <div style="margin-bottom: 20px;">
                        <button onclick="window.tildaCabinet.refresh()" style="
                            background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
                            color: white;
                            border: none;
                            padding: 12px 25px;
                            border-radius: 25px;
                            cursor: pointer;
                            font-size: 14px;
                            font-weight: 500;
                            margin: 0 5px;
                        ">
                            üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                        </button>
                        <button onclick="window.tildaCabinet.testWithEmail('shoppingalanya@gmail.com')" style="
                            background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
                            color: white;
                            border: none;
                            padding: 12px 25px;
                            border-radius: 25px;
                            cursor: pointer;
                            font-size: 14px;
                            font-weight: 500;
                            margin: 0 5px;
                        ">
                            üß™ –¢–µ—Å—Ç —Å shoppingalanya@gmail.com
                        </button>
                        <button onclick="window.tildaCabinet.clearCache()" style="
                            background: linear-gradient(135deg, #dc3545 0%, #c82333 100%);
                            color: white;
                            border: none;
                            padding: 12px 25px;
                            border-radius: 25px;
                            cursor: pointer;
                            font-size: 14px;
                            font-weight: 500;
                            margin: 0 5px;
                        ">
                            üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –¢–∏–ª—å–¥—ã
                        </button>
                    </div>
                </div>
            `;
        }
    }
    
    // ‚è≥ –û–ñ–ò–î–ê–ù–ò–ï –ó–ê–ì–†–£–ó–ö–ò –î–ê–ù–ù–´–• –¢–ò–õ–¨–î–´
    async function waitForTildaData(maxWaitTime = 3000) {
        const startTime = Date.now();
        let attempts = 0;
        const maxAttempts = 15; // –º–∞–∫—Å–∏–º—É–º 15 –ø–æ–ø—ã—Ç–æ–∫
        
        while (Date.now() - startTime < maxWaitTime && attempts < maxAttempts) {
            attempts++;
            log(`–ü–æ–ø—ã—Ç–∫–∞ ${attempts}/${maxAttempts} –ø–æ–ª—É—á–∏—Ç—å email –∏–∑ –¢–∏–ª—å–¥—ã...`);
            
            const email = getTildaUserEmail();
            if (email) {
                log(`–î–∞–Ω–Ω—ã–µ –¢–∏–ª—å–¥—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã: ${email}`);
                return email;
            }
            
            // –ñ–¥–µ–º 200–º—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            await new Promise(resolve => setTimeout(resolve, 200));
        }
        
        log(`–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¢–∏–ª—å–¥—ã –∏—Å—Ç–µ–∫–ª–æ –ø–æ—Å–ª–µ ${attempts} –ø–æ–ø—ã—Ç–æ–∫`);
        return null;
    }
    
    // üéØ –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ó–ê–ì–†–£–ó–ö–ò –ü–†–û–§–ò–õ–Ø
    async function loadUserProfile() {
        log('–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
        
        try {
            // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¢–∏–ª—å–¥—ã
            log('–û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã –¢–∏–ª—å–¥—ã...');
            const email = await waitForTildaData();
            
            if (!email) {
                log('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å email –∏–∑ —Å–∏—Å—Ç–µ–º—ã –¢–∏–ª—å–¥—ã');
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
                displayUserData(null);
                
                // –ù–ï –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—Ä–µ–º—è —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è
                log('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏');
                return;
            }
            
            log(`–ü–æ–ª—É—á–µ–Ω email –∏–∑ –¢–∏–ª—å–¥—ã: ${email}`);
            
            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
            const userData = await fetchUserData(email);
            
            if (userData) {
                log('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
                displayUserData(userData);
            } else {
                log('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
                displayUserData(null);
            }
            
        } catch (error) {
            log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è:', error);
            displayUserData(null);
        }
    }
    
    // üöÄ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ö–†–ò–ü–¢–ê
    function initializeCabinet() {
        log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞');
        
        // –§—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º email
        async function testWithEmail(email) {
            log(`–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å email: ${email}`);
            try {
                const userData = await fetchUserData(email);
                if (userData) {
                    displayUserData(userData);
                } else {
                    log('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ email');
                }
            } catch (error) {
                log('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
            }
        }
        
        // –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¢–∏–ª—å–¥—ã
        function clearTildaCache() {
            log('–û—á–∏—â–∞–µ–º –∫—ç—à –¥–∞–Ω–Ω—ã—Ö –¢–∏–ª—å–¥—ã...');
            
            // –û—á–∏—â–∞–µ–º –∫—É–∫–∏ –¢–∏–ª—å–¥—ã
            const cookiesToClear = ['tilda_user_email', 'tilda_user_data', 'tilda_user_token'];
            cookiesToClear.forEach(cookieName => {
                document.cookie = `${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;`;
                log(`–û—á–∏—â–µ–Ω–∞ –∫—É–∫–∞: ${cookieName}`);
            });
            
            // –û—á–∏—â–∞–µ–º localStorage
            const localStorageKeys = ['tilda_user_email', 'tilda_user_data', 'tilda_user_token'];
            localStorageKeys.forEach(key => {
                if (localStorage.getItem(key)) {
                    localStorage.removeItem(key);
                    log(`–û—á–∏—â–µ–Ω localStorage: ${key}`);
                }
            });
            
            log('–ö—ç—à –æ—á–∏—â–µ–Ω, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É...');
            setTimeout(() => {
                window.location.reload();
            }, 1000);
        }
        
        // –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–±–∏–Ω–µ—Ç–æ–º
        window.tildaCabinet = {
            refresh: loadUserProfile,
            getEmail: getTildaUserEmail,
            testWithEmail: testWithEmail,
            clearCache: clearTildaCache
        };
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
        setTimeout(loadUserProfile, 1000);
        
        log('–°–∫—Ä–∏–ø—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
    
    // üé¨ –ó–ê–ü–£–°–ö –°–ö–†–ò–ü–¢–ê
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initializeCabinet);
    } else {
        initializeCabinet();
    }
    
    log('–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –¥–ª—è –¢–∏–ª—å–¥—ã –∑–∞–≥—Ä—É–∂–µ–Ω');
    
})();