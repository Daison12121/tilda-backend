/**
 * üöÄ –°–ö–†–ò–ü–¢ –î–õ–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –§–û–†–ú–´ –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò –¢–ò–õ–¨–î–´
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ñ–æ—Ä–º–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –¢–∏–ª—å–¥–µ.
 * –û–Ω –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ä–º—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞ –≤–∞—à —Å–µ—Ä–≤–µ—Ä.
 * 
 * –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –£–°–¢–ê–ù–û–í–ö–ï:
 * 1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–µ—Å—å —ç—Ç–æ—Ç –∫–æ–¥
 * 2. –í –¢–∏–ª—å–¥–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å —Ñ–æ—Ä–º–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–æ–±–∞–≤—å—Ç–µ –±–ª–æ–∫ "HTML-–∫–æ–¥"
 * 3. –í—Å—Ç–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ –±–ª–æ–∫
 * 4. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∏ –æ–ø—É–±–ª–∏–∫—É–π—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É
 */

(function() {
    'use strict';
    
    // ‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò
    const CONFIG = {
        // URL –≤–∞—à–µ–≥–æ –±—ç–∫–µ–Ω–¥–∞ –Ω–∞ Railway
        BACKEND_URL: 'https://tilda-backend-production.up.railway.app',
        
        // –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–æ—Ä–º—ã (–¢–∏–ª—å–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–∞–∑–Ω—ã–µ –∫–ª–∞—Å—Å—ã)
        FORM_SELECTORS: [
            'form[data-form-type="login"]',
            'form.js-form-proccess',
            'form[action*="forms.tildacdn.com"]',
            'form.t-form',
            'form'
        ],
        
        // –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –ø–æ–ª–µ–π email –∏ password
        EMAIL_SELECTORS: [
            'input[name="email"]',
            'input[type="email"]',
            'input[name="Email"]',
            'input[placeholder*="mail"]',
            'input[placeholder*="–ø–æ—á—Ç"]'
        ],
        
        PASSWORD_SELECTORS: [
            'input[name="password"]',
            'input[type="password"]',
            'input[name="Password"]',
            'input[placeholder*="–ø–∞—Ä–æ–ª—å"]',
            'input[placeholder*="Password"]'
        ],
        
        // –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (–≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö)
        TIMEOUT: 10000,
        
        // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –ø–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏
        DEBUG: true
    };
    
    // üìù –§–£–ù–ö–¶–ò–Ø –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø
    function log(message, data = null) {
        if (CONFIG.DEBUG) {
            console.log(`[Tilda Auth] ${message}`, data || '');
        }
    }
    
    // üîç –ü–û–ò–°–ö –≠–õ–ï–ú–ï–ù–¢–ê –ü–û –ù–ï–°–ö–û–õ–¨–ö–ò–ú –°–ï–õ–ï–ö–¢–û–†–ê–ú
    function findElement(selectors) {
        for (const selector of selectors) {
            const element = document.querySelector(selector);
            if (element) {
                log(`–ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É: ${selector}`);
                return element;
            }
        }
        return null;
    }
    
    // üìß –û–¢–ü–†–ê–í–ö–ê –î–ê–ù–ù–´–• –ù–ê –°–ï–†–í–ï–†
    async function sendLoginRequest(email, password) {
        try {
            log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏', { email, password: '***' });
            
            const response = await fetch(`${CONFIG.BACKEND_URL}/api/login`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ email, password }),
                timeout: CONFIG.TIMEOUT
            });
            
            const result = await response.json();
            log('–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞', result);
            
            return { success: response.ok, data: result };
            
        } catch (error) {
            log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞', error);
            return { 
                success: false, 
                data: { 
                    status: 'error', 
                    message: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É' 
                } 
            };
        }
    }
    
    // üé® –ü–û–ö–ê–ó –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ
    function showNotification(message, type = 'info') {
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const existingNotifications = document.querySelectorAll('.tilda-auth-notification');
        existingNotifications.forEach(n => n.remove());
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const notification = document.createElement('div');
        notification.className = 'tilda-auth-notification';
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 10000;
            padding: 15px 20px;
            border-radius: 8px;
            color: white;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            font-size: 14px;
            font-weight: 500;
            max-width: 350px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            animation: slideIn 0.3s ease-out;
            ${type === 'success' ? 'background: linear-gradient(135deg, #28a745, #20c997);' : ''}
            ${type === 'error' ? 'background: linear-gradient(135deg, #dc3545, #e74c3c);' : ''}
            ${type === 'info' ? 'background: linear-gradient(135deg, #007bff, #6610f2);' : ''}
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –∞–Ω–∏–º–∞—Ü–∏–∏
        if (!document.querySelector('#tilda-auth-styles')) {
            const styles = document.createElement('style');
            styles.id = 'tilda-auth-styles';
            styles.textContent = `
                @keyframes slideIn {
                    from { transform: translateX(100%); opacity: 0; }
                    to { transform: translateX(0); opacity: 1; }
                }
                @keyframes slideOut {
                    from { transform: translateX(0); opacity: 1; }
                    to { transform: translateX(100%); opacity: 0; }
                }
            `;
            document.head.appendChild(styles);
        }
        
        notification.textContent = message;
        document.body.appendChild(notification);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            notification.style.animation = 'slideOut 0.3s ease-in';
            setTimeout(() => notification.remove(), 300);
        }, 5000);
    }
    
    // üîÑ –ü–ï–†–ï–ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï –ù–ê –°–¢–†–ê–ù–ò–¶–£ –ö–ê–ë–ò–ù–ï–¢–ê
    function redirectToCabinet(token, userData = null) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ localStorage –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞–±–∏–Ω–µ—Ç–∞
        try {
            localStorage.setItem('tilda_user_token', token);
            if (userData) {
                localStorage.setItem('tilda_user_data', JSON.stringify(userData));
                localStorage.setItem('tilda_user_email', userData.email);
            }
        } catch (error) {
            log('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ localStorage:', error);
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞–±–∏–Ω–µ—Ç–∞
        let cabinetUrl;
        
        // –ï—Å–ª–∏ –º—ã –Ω–∞ —Ç–æ–º –∂–µ –¥–æ–º–µ–Ω–µ, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞–±–∏–Ω–µ—Ç–∞ –¢–∏–ª—å–¥—ã
        if (window.location.hostname.includes('tilda.ws') || 
            window.location.hostname.includes('tilda.cc') ||
            window.location.hostname !== 'localhost') {
            // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞–±–∏–Ω–µ—Ç–∞ –≤ –¢–∏–ª—å–¥–µ (–Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL)
            cabinetUrl = '/cabinet'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞–±–∏–Ω–µ—Ç–∞ –≤ –¢–∏–ª—å–¥–µ
        } else {
            // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à —Å–µ—Ä–≤–µ—Ä
            cabinetUrl = `${CONFIG.BACKEND_URL}/cabinet?token=${token}`;
        }
        
        log('–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–±–∏–Ω–µ—Ç', cabinetUrl);
        
        showNotification('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º...', 'success');
        
        setTimeout(() => {
            window.location.href = cabinetUrl;
        }, 1500);
    }
    
    // üìã –û–ë–†–ê–ë–û–¢–ö–ê –û–¢–ü–†–ê–í–ö–ò –§–û–†–ú–´
    function handleFormSubmit(event, form) {
        event.preventDefault();
        log('–ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã');
        
        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—è email –∏ password
        const emailField = findElement(CONFIG.EMAIL_SELECTORS);
        const passwordField = findElement(CONFIG.PASSWORD_SELECTORS);
        
        if (!emailField) {
            log('–ü–æ–ª–µ email –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            showNotification('‚ùå –ü–æ–ª–µ email –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ —Ñ–æ—Ä–º–µ', 'error');
            return;
        }
        
        const email = emailField.value.trim();
        const password = passwordField ? passwordField.value : '';
        
        if (!email) {
            showNotification('‚ùå –í–≤–µ–¥–∏—Ç–µ email', 'error');
            emailField.focus();
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç email
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(email)) {
            showNotification('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email', 'error');
            emailField.focus();
            return;
        }
        
        log('–î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –≤–∞–ª–∏–¥–Ω—ã', { email, hasPassword: !!password });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        showNotification('üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ...', 'info');
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        sendLoginRequest(email, password)
            .then(response => {
                if (response.success && response.data.status === 'success') {
                    log('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞', response.data);
                    
                    if (response.data.token) {
                        redirectToCabinet(response.data.token, response.data.user);
                    } else {
                        showNotification('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!', 'success');
                    }
                } else {
                    log('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏', response.data);
                    const errorMessage = response.data.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
                    showNotification(`‚ùå ${errorMessage}`, 'error');
                }
            })
            .catch(error => {
                log('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞', error);
                showNotification('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', 'error');
            });
    }
    
    // üéØ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ö–†–ò–ü–¢–ê
    function initializeScript() {
        log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
        
        // –ò—â–µ–º —Ñ–æ—Ä–º—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        const form = findElement(CONFIG.FORM_SELECTORS);
        
        if (!form) {
            log('–§–æ—Ä–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ');
            return;
        }
        
        log('–§–æ—Ä–º–∞ –Ω–∞–π–¥–µ–Ω–∞', form);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
        form.addEventListener('submit', (event) => {
            handleFormSubmit(event, form);
        });
        
        log('–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–æ–≥–æ, —á—Ç–æ —Å–∫—Ä–∏–ø—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç
        if (CONFIG.DEBUG) {
            const indicator = document.createElement('div');
            indicator.style.cssText = `
                position: fixed;
                bottom: 20px;
                left: 20px;
                background: rgba(0,123,255,0.9);
                color: white;
                padding: 8px 12px;
                border-radius: 20px;
                font-size: 12px;
                font-family: monospace;
                z-index: 9999;
                pointer-events: none;
            `;
            indicator.textContent = 'üîó Tilda Auth Active';
            document.body.appendChild(indicator);
            
            // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => indicator.remove(), 3000);
        }
    }
    
    // üöÄ –ó–ê–ü–£–°–ö –°–ö–†–ò–ü–¢–ê
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initializeScript);
    } else {
        initializeScript();
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É (–Ω–∞ —Å–ª—É—á–∞–π –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ä–º—ã)
    setTimeout(initializeScript, 1000);
    
    log('–°–∫—Ä–∏–ø—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –¢–∏–ª—å–¥–æ–π –∑–∞–≥—Ä—É–∂–µ–Ω');
    
})();